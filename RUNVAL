#This is solely for tracking down bugs.
#Ignore this.
opts=" -l -vvv liu/free_invalid_address.elf"
opts="-a macho-kask/dwarfdump_32"
opts="-a -R -v -v -v -v -v -v -x line5=std  ppc2/powerpc-750-linux-gnu-hello-static"
opts=" -vvv -a  shopov2/clang-9.0.0-test-dwarf5.elf"
opts="-kF -ki irixn32/dwarfdump"
opts="-ka liu/OOB_read4.elf"
opts="-kn sarubbo-7/4.crashes.bin"
opts="--check-tag-attr debugfissionb/ld-new"
opts="-ka -kd -P -R -M dwarf4/ddg4.5dwarf-4"
opts="-ka -ki liu/outofbound01.elf"
opts="-i -H 1 irixn32/dwarfdump"
opts="--suppress-de-alloc-tree -a shopov2/clang-9.0.0-test-dwarf5.elf"
opts="--suppress-de-alloc-tree -a  sarubbo/test433.crashes"
opts="--suppress-de-alloc-tree -r -v  -oi  liu/infinitloop.elf"
opts=" -ka -cGNU%20AS -M -R  modula2/write-fixed"

#./dwarfdump.O  $opts >junko
#/tmp/dwarfdump $opts >junkn
valgrind --log-file=./vglog --leak-check=full --show-leak-kinds=all  /tmp/dwarfdump $opts >junkn
#./dwarfdump.O -i -G -M debugfissionb/ld-new >junkia

# --track-origins=yes (an expensive option to valgrind)

echo                 >junkcmd
#echo "b dwarf_die_abbrev_code" >>junkcmd
#echo "b _dwarf_error" >>junkcmd
#echo "b _dwarf_error_string" >>junkcmd
echo "r  $opts "    >>junkcmd
#gdb -x junkcmd .//dwarfdump
