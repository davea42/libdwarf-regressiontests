#!/bin/sh
# Pick up newly built dwarfdump in two flavors.
# Pick up libdwarf in two flavors.

# The -fsanitize=address tells gcc to use extra run-time
# code to look for code writing where it should not.
# It should be sufficiently efficient to do by default, but
# we will see.
#  The gcc option is -fsanitize=address and the like
if [ x$NLIZE = 'xy' ]
then
sanitize="--enable-sanitize"
else
sanitize=
fi

cur=`pwd`
top_build=/tmp/regressionbuild
if [ ! -d $top_build ]
then
  mkdir $top_build
fi
rm -rf $top_build/*

set -x
# Fix the following line to match the desired 
# libdwarf/dwarfdump source 
# directory.
. ./BASEFILES

cd $top_build 
$libdw/configure $sanitize  --enable-oldframecol ;  make

cp libdwarf/.libs/libdwarf.a $cur/libdwoldframecol.a
if [ $? -ne 0 ]
then
  echo "No libdwoldframecol.a copied! giving up."
  exit 1;
fi

rm -rf $top_build/*
$libdw/configure $sanitize --enable-windowspath ; make 

cp dwarfdump/dwarfdump   $cur/dwarfdumpW
if [ $? -ne 0 ]
then
  echo "No dwarfdumpW done! giving up."
  exit 1;
fi


rm -rf $top_build/*
$libdw/configure $sanitize --enable-dwarfgen --enable-dwarfexample ;  make 
if [ $? -ne 0 ]
then
  echo "No libdwarf.a built! giving up."
  exit 1;
fi
cp libdwarf/.libs/libdwarf.a $cur/libdwarf.a
if [ $? -ne 0 ]
then
  echo "No libdwarf.a to copy! giving up."
  exit 1;
fi

cp dwarfdump/dwarfdump  $cur/dwarfdump
if [ $? -ne 0 ]
then
  echo "No dwarfdump to copy! giving up."
  exit 1;
fi
cp $libdw/dwarfdump/dwarfdump.conf  $cur/dwarfdump.conf
if [ $? -ne 0 ]
then
  echo "No dwarfdump.conf to copy! giving up."
  exit 1;
fi
cp $top_build/libdwarf/gennames $cur
if [ $? -ne 0 ]
then
  echo "No gennames to copy! giving up."
  exit 1;
fi
cp $top_build/dwarfgen/dwarfgen  $cur
if [ $? -ne 0 ]
then
  echo "No dwarfgen to copy! giving up."
  exit 1;
fi
cp $top_build/dwarfexample/simplereader  $cur
if [ $? -ne 0 ]
then
  echo "No simplereader to copy! giving up."
  exit 1;
fi
